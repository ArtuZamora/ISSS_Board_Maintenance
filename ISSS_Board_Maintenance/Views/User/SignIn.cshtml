@model ISSS_Board_Maintenance.Models.employee_user

@section Styles{
    @Styles.Render("~/fonts/font-awesome-4.7.0/css/font-awesome.min.css")
    @Styles.Render("~/fonts/iconic/css/material-design-iconic-font.min.css")
    @Styles.Render("~/vendor/animate/animate.css")
    @Styles.Render("~/vendor/css-hamburgers/hamburgers.min.css")
    @Styles.Render("~/vendor/select2/select2.min.css")
    @Styles.Render("~/vendor/daterangepicker/daterangepicker.css")
    @Styles.Render("~/Content/login_main.css")
    @Styles.Render("~/Content/login_util.css")
}

@using (Html.BeginForm("SignIn", "User", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="login100-form validate-form" id="signinSection" style="display:none">
        <span class="login100-form-title">
            Registro
        </span>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            <p>Nombres</p>
            <div class="wrap-input100 validate-input">
                @Html.EditorFor(model => model.name, new
                {
                    htmlAttributes = new
                    {
                       @class = "input100",
                       @type = "text",
                       @style = "height: 40px"
                    }
                })
                @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
                <span class="focus-input100"></span>
            </div>
        </div>

        <div class="form-group">
            <p>Apellidos</p>
            <div class="wrap-input100 validate-input">
                @Html.EditorFor(model => model.last_name, new
                {
                    htmlAttributes = new
                    {
                       @class = "input100",
                       @type = "text",
                       @style = "height: 40px"
                    }
                })
                @Html.ValidationMessageFor(model => model.last_name, "", new { @class = "text-danger" })
                <span class="focus-input100"></span>
            </div>
        </div>

        <div class="form-group">
            <p>Nombre de usuario</p>
            <div class="wrap-input100 validate-input">
                @Html.EditorFor(model => model.username, new
                {
                    htmlAttributes = new
                    {
                       @class = "input100",
                       @type = "text",
                       @style = "height: 40px"
                    }
                })
                @Html.ValidationMessageFor(model => model.username, "", new { @class = "text-danger" })
                <span class="focus-input100"></span>
            </div>
        </div>

        <div class="form-group">
            <p>Contraseña</p>
            <div class="wrap-input100 validate-input">
                @Html.EditorFor(model => model.password, new
                {
                    htmlAttributes = new
                    {
                       @class = "input100",
                       @type = "password",
                       @style = "height: 40px"
                    }
                })
                @Html.ValidationMessageFor(model => model.password, "", new { @class = "text-danger" })
                <span class="focus-input100"></span>
            </div>
        </div>

        <div class="form-group">
            <p>Dependencia</p>
            <div class="wrap-input100 validate-input">
                <select id="dependency_id" name="dependency_id" class="input100" style="height:40px;">
                </select>
                <span class="focus-input100"></span>
            </div>
        </div>

        <div class="form-group">
            <p>Firma</p><br />
            @Html.Editor("signatureData", new
            {
                htmlAttributes = new
                {
                   @id = "signatureData",
                   @class = "input100",
                   @type = "file",
                   @name = "signatureData",
                   @style = "height: 40px",
                   @onchange = "fileCheck(this);",
                   @accept = "image/*"
                }
            })
        </div>

        <div id="alertMessage2" style="color:red;display:none;">
            <strong>Error!</strong> Debe llenar todos los datos
        </div>

        <div id="alertMessage3" style="color:red;display:none;">
            <strong>Error!</strong> Tamaño máximo para archivos: 2MB
        </div>

        <div id="alertMessage5" style="color:red;display:none;">
            <strong>Error!</strong> Nombre de usuario ya existente
        </div>

        <div class="container-login100-form-btn m-t-20">
            <input id="registerBtn" type="submit" value="Registrarse" class="login100-form-btn" style="background-color:forestgreen" />
        </div>

        <div class="text-center m-t-30">
            <a id="returnLink" class="txt2 hov1" style="cursor:pointer">
                Regresar
            </a>
        </div>
    </div>
}
@{
    if (null != TempData["noFullData"])
    {
        <script>
            $("#alertMessage2").show();
        </script>
    }
    else if (null != TempData["maxSizeReached"])
    {
        <script>
            $("#alertMessage3").show();
        </script>
    }
    else if (null != TempData["userFound"])
    {
        <script>
            $("#alertMessage5").show();
        </script>
    }
}
@section Scripts{
    @Scripts.Render("~/Scripts/login_signin.js")
    <script>
        var getUrl = window.location;
        var baseUrl = getUrl.protocol + "//" + getUrl.host + "/";
        $(document).ready(function () {
            $("#registerBtn").hover(function () {
                $(this).css("background-color", "green");
            },
                function () {
                    $(this).css("background-color", "forestgreen");
                });
            $.ajax({
                type: "GET",
                url: baseUrl + "api/DependencyAPI/",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                    $.each(response, function (index) {
                        $("#dependency_id").append(new Option(response[index].dependency_name, response[index].dependency_id));
                    });
                }
            });
        });
    </script>
}